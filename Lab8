#include <iostream>
#include <cstdio>

using namespace std;

const int MAX_NODES = 100;

int n, m; // n - numărul de noduri, m - numărul de muchii
int graph[MAX_NODES][MAX_NODES]; // matricea de incidență

void readGraph()
{
    cout << "Numarul de noduri: ";
    cin >> n;

    cout << "Numarul de muchii: ";
    cin >> m;

    for (int i = 0; i < m; i++)
    {
        int x, y;
        cout << "Muchia " << i << ": ";
        cin >> x >> y;
        graph[x][y] = 1;
    }
}

void editGraph()
{
    int node1, node2;
    cout << "Editare muchie (node1 node2): ";
    cin >> node1 >> node2;
    graph[node1][node2] = !graph[node1][node2];
}

void RoyWarshall()
{
    for (int k = 0; k < n; k++)
    {
        for (int i = 0; i < n; i++)
        {
            for (int j = 0; j < n; j++)
            {
                graph[i][j] = graph[i][j] || (graph[i][k] && graph[k][j]);
            }
        }
    }
}

void printGraph()
{
    cout << "Matricea de incidenta:" << endl;
    for (int i = 0; i < n; i++)
    {
        for (int j = 0; j < n; j++)
        {
            cout << graph[i][j] << " ";
        }
        cout << endl;
    }
}

int main()
{
    readGraph();
    RoyWarshall();
    printGraph();

    int opt;
    cout << "Optiuni:" << endl;
    cout << "1. Editare graf" << endl;
    cout << "2. Iesire" << endl;

    while (true)
    {
        cout << "Optiune: ";
        cin >> opt;
        switch (opt)
        {
        case 1:
            editGraph();
            RoyWarshall();
            printGraph();
            break;
        case 2:
            return 0;
        default:
            cout << "Optiune invalida" << endl;
        }
    }

    return 0;
}

